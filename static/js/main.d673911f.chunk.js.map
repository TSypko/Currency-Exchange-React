{"version":3,"sources":["utils/flags/Polish Zloty.svg","utils/flags/Euro.svg","utils/flags/US Dollar.svg","utils/flags/British Pound.svg","utils/flags/Swiss Franc.svg","utils/flags/Danish krone.svg","utils/flags/Norwegian krone.svg","utils/flags/Swedish krona.svg","utils/flags/Russian rouble.svg","utils/flags/Ukrainian hryvnia.svg","utils/flags/Czech koruna.svg","utils/flags/Japanese Yen.svg","utils/flags/Croatian Kuna.svg","Container/index.js","Header/index.js","utils/currencies/index.js","CurrencySelector/index.js","FormField/index.js","ResultField/index.js","Amount/index.js","Form/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Container","children","className","Header","title","currencies","name","shortname","rate","flagImage","flag","country","CurrencySelector","labelText","value","onChange","currencySelectorItem","sort","a","b","localeCompare","map","currency","key","FormField","formFieldType","body","ResultField","result","currencyToName","resultString","amount","Amount","type","step","Form","useState","currencyFromName","setCurrencyFromName","setCurrencyToName","setAmount","currencyFrom","find","currencyTo","toFixed","onSubmit","event","preventDefault","target","src","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d673911f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Polish Zloty.1f9d98ad.svg\";","module.exports = __webpack_public_path__ + \"static/media/Euro.56bbc4f2.svg\";","module.exports = __webpack_public_path__ + \"static/media/US Dollar.1b6ffca9.svg\";","module.exports = __webpack_public_path__ + \"static/media/British Pound.68b4d830.svg\";","module.exports = __webpack_public_path__ + \"static/media/Swiss Franc.69547e25.svg\";","module.exports = __webpack_public_path__ + \"static/media/Danish krone.07be1277.svg\";","module.exports = __webpack_public_path__ + \"static/media/Norwegian krone.4b57a28e.svg\";","module.exports = __webpack_public_path__ + \"static/media/Swedish krona.c37f1b98.svg\";","module.exports = __webpack_public_path__ + \"static/media/Russian rouble.7a8b3a7d.svg\";","module.exports = __webpack_public_path__ + \"static/media/Ukrainian hryvnia.1aeecd60.svg\";","module.exports = __webpack_public_path__ + \"static/media/Czech koruna.9c5898c6.svg\";","module.exports = __webpack_public_path__ + \"static/media/Japanese Yen.a1e1ea51.svg\";","module.exports = __webpack_public_path__ + \"static/media/Croatian Kuna.3e56776d.svg\";","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Container = ({ children }) => (\r\n    <main className=\"container\">\r\n        {children}\r\n    </main>\r\n)\r\n\r\nexport default Container;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Header = ({ title }) => (\r\n    <h1 className=\"header\">{title}</h1>\r\n\r\n)\r\n\r\nexport default Header;","import * as flag from '../flags';\r\n\r\nexport const rateDate = \"2020-07-19\";\r\n\r\nexport const currencies = [\r\n  {\r\n    name: \"Polish Zloty\",\r\n    shortname: \"PLN\",\r\n    rate: 1,\r\n    flagImage: flag.plnFlagImage,\r\n    country: \"Poland\",\r\n  },\r\n  {\r\n    name: \"Euro\",\r\n    shortname: \"EUR\",\r\n    rate: 4.4827,\r\n    flagImage: flag.euroFlagImage,\r\n    country: \"European Union\",\r\n  },\r\n  {\r\n    name: \"US Dollar\",\r\n    shortname: \"USD\",\r\n    rate: 3.9263,\r\n    flagImage: flag.usdFlagImage,\r\n    country: \"United States of America\",\r\n  },\r\n  {\r\n    name: \"British Pound\",\r\n    shortname: \"GBP\",\r\n    rate: 4.9331,\r\n    flagImage: flag.gbpFlagImage,\r\n    country: \"Great Britain\",\r\n  },\r\n  {\r\n    name: \"Swiss Franc\",\r\n    shortname: \"CHF\",\r\n    rate: 4.1647,\r\n    flagImage: flag.chfFlagImage,\r\n    country: \"Switzerland\",\r\n  },\r\n  {\r\n    name: \"Danish krone\",\r\n    shortname: \"DKK\",\r\n    rate: 0.6021,\r\n    flagImage: flag.dkkFlagImage,\r\n    country: \"Denmark\",\r\n  },\r\n  {\r\n    name: \"Norwegian krone\",\r\n    shortname: \"NOK\",\r\n    rate: 0.4230,\r\n    flagImage: flag.norFlagImage,\r\n    country: \"Norway\",\r\n  },\r\n  {\r\n    name: \"Swedish krona\",\r\n    shortname: \"SEK\",\r\n    rate: 0.4338,\r\n    flagImage: flag.sweFlagImage,\r\n    country: \"Sweden\",\r\n  },\r\n  {\r\n    name: \"Russian rouble\",\r\n    shortname: \"RUB\",\r\n    rate: 0.0546,\r\n    flagImage: flag.rusFlagImage,\r\n    country: \"Russia\",\r\n  },\r\n  {\r\n    name: \"Ukrainian hryvnia\",\r\n    shortname: \"UAH\",\r\n    rate: 0.1435,\r\n    flagImage: flag.ukrFlagImage,\r\n    country: \"Ukraine\",\r\n  },\r\n  {\r\n    name: \"Czech koruna\",\r\n    shortname: \"CZK\",\r\n    rate: 0.1678,\r\n    flagImage: flag.czkFlagImage,\r\n    country: \"Czechia\",\r\n  },\r\n  {\r\n    name: \"Japanese Yen\",\r\n    shortname: \"JPY\",\r\n    rate: 3.6002 / 100,\r\n    flagImage: flag.jpyFlagImage,\r\n    country: \"Japan\",\r\n  },\r\n  {\r\n    name: \"Croatian Kuna\",\r\n    shortname: \"HRK\",\r\n    rate: 0.5904,\r\n    flagImage: flag.hrkFlagImage,\r\n    country: \"Croatia\",\r\n  },\r\n];\r\n","import React from 'react';\r\nimport { currencies } from '../utils/currencies';\r\nimport \"./style.css\";\r\n\r\nconst CurrencySelector = ({ labelText, value, onChange }) => {\r\n\r\n    const currencySelectorItem = currencies.sort((a, b) => (a.name).localeCompare(b.name));\r\n\r\n    return (\r\n\r\n        <label className=\"currencySelector__label\">\r\n            {labelText}\r\n            <select\r\n                className=\"currencySelector__input\"\r\n                value={value}\r\n                onChange={onChange}\r\n            >\r\n                {currencySelectorItem.map(currency =>\r\n                    <option\r\n                        className=\"currencySelector__item\"\r\n                        key={currency.shortname}>\r\n                        {currency.name}\r\n                    </option>)}\r\n            </select>\r\n        </label>\r\n    );\r\n}\r\n\r\nexport default CurrencySelector;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst FormField = ({ formFieldType, body }) => (\r\n\r\n    <div className={`formField${formFieldType ? ` formField--${formFieldType}` : \"\"}`}>\r\n        {body}\r\n    </div>\r\n);\r\n\r\nexport default FormField;","import React from 'react';\r\nimport { rateDate } from '../utils/currencies';\r\nimport \"./style.css\";\r\n\r\nconst ResultField = ({ result, currencyToName, amount }) => {\r\n    const resultString =\r\n        amount\r\n            ? `${result} ${currencyToName}`\r\n            : \"\"\r\n        ;\r\n    return (\r\n        <>\r\n            <p className=\"resultField__result\">\r\n                Result:\r\n                <span className=\"resultField__result--value\">\r\n                    {resultString}\r\n                </span>\r\n            </p>\r\n            <p className=\"resultField__note\">\r\n                <strong>IMPORTANT!</strong> exchange rates according to National Bank of Poland from {rateDate}\r\n            </p>\r\n        </>\r\n    )\r\n};\r\nexport default ResultField;","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Amount = ({ value, onChange }) => (\r\n    <label className=\"amount\"\r\n    >Amount:\r\n        <input\r\n            type=\"number\"\r\n            step=\"0.01\"\r\n            className=\"amount__input\"\r\n            value={value}\r\n            onChange={onChange}\r\n        />\r\n    </label>\r\n)\r\n\r\nexport default Amount;","import React, { useState } from 'react';\r\nimport CurrencySelector from \"../CurrencySelector\"\r\nimport FormField from \"../FormField\"\r\nimport ResultField from \"../ResultField\"\r\nimport { currencies } from '../utils/currencies';\r\nimport Amount from '../Amount';\r\nimport \"./style.css\";\r\n\r\nconst Form = () => {\r\n\r\n    const [currencyFromName, setCurrencyFromName] = useState(\"Polish Zloty\");\r\n    const onSelectCurrencyFromChange = ({ target }) => setCurrencyFromName(target.value);\r\n\r\n    const [currencyToName, setCurrencyToName] = useState(\"Euro\");\r\n    const onSelectCurrencyToChange = ({ target }) => setCurrencyToName(target.value);\r\n\r\n    const [amount, setAmount] = useState(\"\");\r\n    const onAmountChange = ({ target }) => setAmount(+target.value);\r\n\r\n    const currencyFrom = currencies.find(({ name }) => name === currencyFromName);\r\n    const currencyTo = currencies.find(({ name }) => name === currencyToName);\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    const result = (amount * currencyFrom.rate / currencyTo.rate).toFixed(2);\r\n\r\n    return (\r\n        <form\r\n            onSubmit={onFormSubmit}\r\n            className=\"form\">\r\n            <fieldset className=\"form__fieldset\">\r\n                <legend className=\"form__legend\">\r\n                    Conventer\r\n                </legend>\r\n                <div className=\"form__inputWrapper\">\r\n                    <FormField\r\n                        body=\r\n                        {\r\n                            <CurrencySelector\r\n                                labelText=\"From:\"\r\n                                value={currencyFromName}\r\n                                onChange={onSelectCurrencyFromChange}\r\n                            />\r\n                        }\r\n                    />\r\n                    <div className=\"form__currencyInFlag\">\r\n                        <img\r\n                            src={currencyFrom.flagImage}\r\n                            alt={`Flag of ${currencyFrom.country}`}\r\n                            className=\"form__flag\" />\r\n                    </div>\r\n                    <FormField\r\n                        body=\r\n                        {\r\n                            <CurrencySelector\r\n                                labelText=\"To:\"\r\n                                value={currencyToName}\r\n                                onChange={onSelectCurrencyToChange}\r\n                            />\r\n                        }\r\n                    />\r\n                    <div className=\"form__currencyOutFlag\">\r\n                        <img\r\n                            src={currencyTo.flagImage}\r\n                            alt={`Flag of ${currencyTo.country}`}\r\n                            className=\"form__flag\" />\r\n                    </div>\r\n                    <FormField\r\n                        body=\r\n                        {\r\n                            <Amount\r\n                                value={amount}\r\n                                onChange={onAmountChange}\r\n                            />\r\n                        }\r\n                    />\r\n                </div>\r\n                <FormField\r\n                    formFieldType={\"result\"}\r\n                    body=\r\n                    {\r\n                        <ResultField\r\n                            result={result}\r\n                            currencyToName={currencyTo.shortname}\r\n                            amount={amount}\r\n                        />\r\n                    }\r\n                />\r\n            </fieldset>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport Container from './Container';\r\nimport Header from './Header';\r\nimport Form from './Form';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <Container>\r\n      <Header title=\"simple currency exchange\" />\r\n      <Form \r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}